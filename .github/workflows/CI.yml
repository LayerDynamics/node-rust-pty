name: CI
env:
  DEBUG: napi:*
  APP_NAME: node-rust-pty
  MACOSX_DEPLOYMENT_TARGET: '10.13'
permissions:
  contents: write
  id-token: write
on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            move-to: npm/darwin-x64/
            build: npm run build -- --target x86_64-apple-darwin
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            move-to: npm/linux-x64-gnu/
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: npm run build -- --target x86_64-unknown-linux-gnu
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            move-to: npm/win32-x64-msvc/
            build: npm run build -- --target x86_64-pc-windows-msvc
          - host: windows-latest
            target: i686-pc-windows-msvc
            move-to: npm/win32-ia32-msvc/
            build: npm run build -- --target i686-pc-windows-msvc
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            move-to: npm/win32-arm64-msvc/
            build: npm run build -- --target aarch64-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          cache: npm

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker && matrix.settings.host != 'windows-latest' }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target == 'armv7-unknown-linux-musleabihf' }}
        with:
          version: 0.13.0

      - name: Install Dependencies
        run: npm ci

      - name: Build in Docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}

      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash

      - name: Move Prebuilt Files to Correct Folder
        run: sudo mv npm/prebuilds/* ${{ matrix.settings.move-to }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ matrix.settings.move-to }}*.node
          if-no-files-found: error

  test-macOS-linux-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            move-to: npm/darwin-x64/
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            move-to: npm/linux-x64-gnu/
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            move-to: npm/win32-x64-msvc/
          - host: windows-latest
            target: i686-pc-windows-msvc
            move-to: npm/win32-ia32-msvc/
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            move-to: npm/win32-arm64-msvc/
        node:
          - '18'
          - '20'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm
          architecture: x64

      - name: Install Dependencies
        run: npm ci

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .

      - name: List Packages
        run: ls -R .
        shell: bash

      - name: Test Bindings
        run: npm test

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-macOS-linux-windows-binding
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: npm/prebuilds

      - name: Move Artifacts
        run: sudo mv npm/prebuilds/* ./npm/

      - name: List Packages
        run: ls -R ./npm
        shell: bash

      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
