/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * Retrieves the current user's home directory.
 *
 * # Returns
 *
 * - `String`: The path to the home directory.
 *
 * # Example
 *
 * ```javascript
 * const path = require('your-module');
 *
 * path.getHomeDir()
 *   .then(home => {
 *     console.log('Home Directory:', home);
 *   })
 *   .catch(err => {
 *     console.error(err);
 *   });
 * ```
 */
export declare function getHomeDir(): Promise<string>
/**
 * Retrieves the system's temporary directory.
 *
 * # Returns
 *
 * - `String`: The path to the temporary directory.
 *
 * # Example
 *
 * ```javascript
 * const path = require('your-module');
 *
 * path.getTempDir()
 *   .then(temp => {
 *     console.log('Temporary Directory:', temp);
 *   })
 *   .catch(err => {
 *     console.error(err);
 *   });
 * ```
 */
export declare function getTempDir(): Promise<string>
/**
 * Joins multiple path segments into a single path string.
 *
 * # Arguments
 *
 * * `segments` - An array of path segments.
 *
 * # Returns
 *
 * A string representing the joined path.
 *
 * # Example
 *
 * ```javascript
 * const path = require('your-module');
 *
 * path.joinPaths(['/usr', 'local', 'bin'])
 *   .then(fullPath => {
 *     console.log(fullPath); // Outputs: "/usr/local/bin"
 *   })
 *   .catch(err => {
 *     console.error(err);
 *   });
 * ```
 */
export declare function joinPaths(segments: Array<string>): Promise<string>
/**
 * Converts a relative path to an absolute path.
 *
 * # Arguments
 *
 * * `path_str` - A string representing the path to be converted.
 *
 * # Returns
 *
 * The absolute path as a string.
 *
 * # Example
 *
 * ```javascript
 * const path = require('your-module');
 * const { Path } = require('path'); // Assuming you have a Path class or similar
 *
 * path.absolutePath('./some/relative/path')
 *   .then(absolute => {
 *     console.log('Absolute Path:', absolute);
 *   })
 *   .catch(err => {
 *     console.error(err);
 *   });
 * ```
 */
export declare function absolutePath(pathStr: string): Promise<string>
/**
 * Checks if a given path exists.
 *
 * # Arguments
 *
 * * `path_str` - A string representing the path to be checked.
 *
 * # Returns
 *
 * - `Boolean`: `true` if the path exists, `false` otherwise.
 *
 * # Example
 *
 * ```javascript
 * const path = require('your-module');
 *
 * path.pathExists('/usr/bin')
 *   .then(exists => {
 *     console.log('Path exists:', exists);
 *   })
 *   .catch(err => {
 *     console.error(err);
 *   });
 * ```
 */
export declare function pathExists(pathStr: string): Promise<boolean>
/**
 * Checks if a given path is a file.
 *
 * # Arguments
 *
 * * `path_str` - A string representing the path to be checked.
 *
 * # Returns
 *
 * - `Boolean`: `true` if the path is a file, `false` otherwise.
 *
 * # Example
 *
 * ```javascript
 * const path = require('your-module');
 *
 * path.isFile('/usr/bin/bash')
 *   .then(isFile => {
 *     console.log('Is file:', isFile);
 *   })
 *   .catch(err => {
 *     console.error(err);
 *   });
 * ```
 */
export declare function isFile(pathStr: string): Promise<boolean>
/**
 * Checks if a given path is a directory.
 *
 * # Arguments
 *
 * * `path_str` - A string representing the path to be checked.
 *
 * # Returns
 *
 * - `Boolean`: `true` if the path is a directory, `false` otherwise.
 *
 * # Example
 *
 * ```javascript
 * const path = require('your-module');
 *
 * path.isDir('/usr/local')
 *   .then(isDir => {
 *     console.log('Is directory:', isDir);
 *   })
 *   .catch(err => {
 *     console.error(err);
 *   });
 * ```
 */
export declare function isDir(pathStr: string): Promise<boolean>
/**
 * Expands the given path by replacing environment variables and tilde with their actual values.
 *
 * Supports tilde expansion (e.g., `~` to home directory) and environment variable expansion
 * using `${VAR}` syntax.
 *
 * # Parameters
 *
 * - `path`: The path string to expand.
 *
 * # Returns
 *
 * - `Ok(String)`: The expanded path as a `String`.
 * - `Err(napi::Error)`: If an environment variable is not set.
 *
 * # Example
 *
 * ```javascript
 * let expanded = path.expandPath("~/${USER}/documents").then(expandedPath => {
 *   console.log(expandedPath);
 * }).catch(err => {
 *   console.error(err);
 * });
 * ```
 */
export declare function expandPathNapi(path: string): Promise<string>
/**
 * Retrieves the default shell path based on the operating system.
 *
 * # Returns
 *
 * The path to the default shell as a string.
 *
 * # Example
 *
 * ```javascript
 * const path = require('your-module');
 *
 * path.getDefaultShell()
 *   .then(shell => {
 *     console.log('Default Shell:', shell);
 *   })
 *   .catch(err => {
 *     console.error(err);
 *   });
 * ```
 */
export declare function getDefaultShell(): Promise<string>
/**
 * Constructs the PTY device path based on the operating system.
 *
 * # Returns
 *
 * The PTY device path as a string.
 *
 * # Example
 *
 * ```javascript
 * const path = require('your-module');
 *
 * path.getPtyDevicePath()
 *   .then(ptyPath => {
 *     console.log('PTY Device Path:', ptyPath);
 *   })
 *   .catch(err => {
 *     console.error(err);
 *   });
 * ```
 */
export declare function getPtyDevicePath(): Promise<string>
/**
 * Retrieves the expanded PTY device path based on the operating system.
 *
 * This function is useful for testing or advanced configurations.
 *
 * # Returns
 *
 * The expanded PTY device path as a string.
 *
 * # Example
 *
 * ```javascript
 * const path = require('your-module');
 *
 * path.getExpandedPtyDevicePath()
 *   .then(expandedPtyPath => {
 *     console.log('Expanded PTY Device Path:', expandedPtyPath);
 *   })
 *   .catch(err => {
 *     console.error(err);
 *   });
 * ```
 */
export declare function getExpandedPtyDevicePath(): Promise<string>
/** Represents the result of splitting a session into two. */
export interface SplitSessionResult {
  session1: number
  session2: number
}
/** Represents session data returned to JavaScript. */
export interface SessionData {
  sessionId: number
  data: string
}
/** Struct to represent session data returned to JavaScript. */
export interface SessionData {
  /** The unique identifier of the session. */
  sessionId: number
  /** The data associated with the session, represented as a `Buffer`. */
  data: Buffer
}
export declare function handleInput(): object | null
/**
 * Helper function to create a style map from a list of key-value pairs.
 *
 * # Parameters
 *
 * - `attributes`: A vector of tuples where each tuple contains a style key and its corresponding value.
 *
 * # Returns
 *
 * A `Styles` `HashMap` containing the provided style attributes.
 *
 * # Example
 *
 * ```javascript
 * const styles = inputHandler.style([["color", "red"], ["bold", "true"]]);
 * ```
 */
export declare function style(attributes: Array<[string, string]>): Styles
/**
 * Creates a styled text node with the given content and styles.
 *
 * # Parameters
 *
 * - `content`: The text content of the node.
 * - `styles`: A `Styles` `HashMap` defining the styles to apply.
 *
 * # Returns
 *
 * A JSON string representing the `VNode` for the styled text.
 *
 * # Example
 *
 * ```javascript
 * const textNode = inputHandler.styledText("Hello, World!", styles);
 * ```
 */
export declare function styledText(content: string, styles: Styles): string
/**
 * Creates a styled element node with the given tag, properties, styles, and children.
 *
 * # Parameters
 *
 * - `tag`: The tag name of the element (e.g., "div", "span").
 * - `props`: A `HashMap` containing properties or attributes for the element.
 * - `styles`: A `Styles` `HashMap` defining the styles to apply.
 * - `children`: A vector of JSON strings representing child `VNode`s.
 *
 * # Returns
 *
 * A JSON string representing the `VNode` for the styled element.
 *
 * # Example
 *
 * ```javascript
 * const elementNode = inputHandler.styledElement("div", props, styles, [childNodeJson]);
 * ```
 */
export declare function styledElement(tag: string, props: Record<string, string>, styles: Styles, children: Array<string>): string
/**
 * Initializes the Virtual DOM module for N-API.
 *
 * This function is automatically called by Node.js when the module is loaded.
 */
export declare function init(): void
/**
 * Initializes the Virtual DOM module for N-API.
 *
 * This function is automatically called by Node.js when the module is loaded.
 */
export declare function initVirtualDom(): void
/**
 * Struct representing the data passed to the worker.
 *
 * Contains the names of the conout and worker pipes for establishing socket connections.
 */
export interface WorkerData {
  conoutPipeName: string
  workerPipeName: string
}
export declare function initModule(): void
export declare class Emulator {
  constructor()
  processInput(input: Buffer): void
  handleEvent(keyCode: string, modifiers: number, commandSender: (arg: unknown) => unknown): void
}
/** Handle to interact with the PTY process and manage commands. */
export declare class PtyHandle {
  /**
   * Creates a new `PtyHandle`.
   *
   * Initializes the PTY process, sets up the multiplexer, starts the command handler,
   * and initializes the worker.
   */
  static new(): PtyHandle
  /** Retrieves the PID of the PTY process. */
  getPid(): Promise<number>
  /** Example method that utilizes the PID */
  logPid(): Promise<void>
  /** Reads data from the PTY asynchronously. */
  read(): Promise<string>
  /** Writes data to the PTY asynchronously. */
  write(data: string): Promise<void>
  /** Resizes the PTY window asynchronously. */
  resize(cols: number, rows: number): Promise<void>
  /** Executes a command in the PTY asynchronously. */
  execute(command: string): Promise<string>
  /** Gracefully shuts down the PTY process and closes all sessions. */
  close(): Promise<void>
  /** Forcefully shuts down the PTY process after a specified timeout. */
  forceKill(forceTimeoutMs: number): Promise<void>
  /** Waits for the PTY process to change state based on the provided options. */
  waitpid(options: number): Promise<number>
  /**
   * Sets an environment variable for the PTY process asynchronously.
   *
   * This method sets the environment variable and verifies its correctness.
   */
  setEnv(key: string, value: string): Promise<void>
  /** Creates a new session and returns its stream ID. */
  createSession(): Promise<number>
  /**
   * Closes all active sessions.
   *
   * This method sends a command to close all active sessions managed by the multiplexer.
   */
  closeAllSessions(): Promise<void>
  /** Sends data to a specific session. */
  sendToSession(sessionId: number, data: Array<number>): Promise<void>
  /** Broadcasts data to all active sessions. */
  broadcast(data: Array<number>): Promise<void>
  /** Reads data from a specific session and returns it as a String. */
  readFromSession(sessionId: number): Promise<string>
  /** Reads data from all sessions and returns a vector of `SessionData`. */
  readAllSessions(): Promise<Array<SessionData>>
  /** Removes a specific session. */
  removeSession(sessionId: number): Promise<void>
  /** Merges multiple sessions into one. */
  mergeSessions(sessionIds: Array<number>): Promise<void>
  /** Splits a session into two separate sessions. */
  splitSession(sessionId: number): Promise<SplitSessionResult>
  /** Changes the shell of the PTY process. */
  changeShell(shellPath: string): Promise<void>
  /** Retrieves the status of the PTY process. */
  status(): Promise<string>
  /** Adjusts the logging level. */
  setLogLevel(level: string): Promise<void>
  /**
   * Starts a new worker.
   *
   * Initializes the worker with the provided `WorkerData` and JavaScript callback.
   */
  startWorker(workerData: WorkerData, callback: (...args: any[]) => any): void
  /** Shuts down the worker gracefully. */
  shutdownWorker(): void
}
/**
 * Multiplexer to handle multiple virtual streams on the same PTY.
 *
 * The `PtyMultiplexer` manages multiple `PtySession`s, allowing concurrent interactions
 * with a single PTY process. It provides functionalities to create, merge, split, and
 * manage sessions, as well as to handle PTY operations such as reading, writing, and
 * broadcasting data.
 */
export declare class PtyMultiplexer {
  /**
   * Creates a new `PtyMultiplexer` with the given `PtyProcess`.
   *
   * # Parameters
   *
   * - `env`: The N-API environment.
   * - `pty_process`: The `JsObject` representing the `PtyProcess`.
   *
   * # Errors
   *
   * Returns a `napi::Error` if the PTY process fails to initialize.
   *
   * # Examples
   *
   * ```javascript
   * const { PtyMultiplexer } = require('./path_to_generated_napi_module');
   * const ptyProcess = new PtyProcess();
   * const multiplexer = new PtyMultiplexer(ptyProcess);
   * ```
   */
  constructor(ptyProcess: object)
  /**
   * Creates a new session and returns its stream ID.
   *
   * This method generates a unique stream ID for the new session, initializes its input and
   * output buffers, and registers it within the multiplexer.
   *
   * # Returns
   *
   * - `u32`: The unique stream ID of the newly created session.
   *
   * # Examples
   *
   * ```javascript
   * const sessionId = multiplexer.createSession();
   * console.log(`Created session with ID: ${sessionId}`);
   * ```
   */
  createSession(): Promise<number>
  /**
   * Sends data to a specific session.
   *
   * This method appends the provided data to the input buffer of the specified session
   * and writes it to the PTY process.
   *
   * # Parameters
   *
   * - `session_id`: The unique identifier of the session to which data will be sent.
   * - `data`: The data to be sent to the session.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.sendToSession(sessionId, Buffer.from('Hello, Session!'));
   * ```
   */
  sendToSession(sessionId: number, data: Buffer): Promise<void>
  /**
   * Broadcasts data to all active sessions.
   *
   * This method appends the provided data to the input buffer of all active sessions
   * and writes it to the PTY process.
   *
   * # Parameters
   *
   * - `data`: The data to be broadcasted to all sessions.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.broadcast(Buffer.from('Hello, All Sessions!'));
   * ```
   */
  broadcast(data: Buffer): Promise<void>
  /**
   * Reads data from a specific session.
   *
   * This method retrieves and clears the output buffer of the specified session,
   * returning the accumulated data.
   *
   * # Parameters
   *
   * - `session_id`: The unique identifier of the session from which data will be read.
   *
   * # Returns
   *
   * - `Result<Buffer, napi::Error>`: Returns a `Buffer` containing the read data if successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * const data = multiplexer.readFromSession(sessionId);
   * console.log(`Data from session ${sessionId}:`, data.toString());
   * ```
   */
  readFromSession(sessionId: number): Promise<Buffer>
  /**
   * Reads data from all sessions.
   *
   * This method retrieves and clears the output buffers of all active sessions,
   * returning a vector of `SessionData` objects.
   *
   * # Returns
   *
   * - `Result<Vec<SessionData>, napi::Error>`: Returns a vector of `SessionData` objects mapping session IDs to their read data if successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * const allData = multiplexer.readAllSessions();
   * allData.forEach(session => {
   *     console.log(`Session ${session.session_id}: ${session.data.toString()}`);
   * });
   * ```
   */
  readAllSessions(): Promise<Array<SessionData>>
  /**
   * Removes a specific session.
   *
   * This method deletes the specified session from the multiplexer, freeing up resources.
   *
   * # Parameters
   *
   * - `session_id`: The unique identifier of the session to be removed.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.removeSession(sessionId);
   * ```
   */
  removeSession(sessionId: number): Promise<void>
  /**
   * Merges multiple sessions into one.
   *
   * This method combines the input and output buffers of the specified sessions into the primary session,
   * and removes the merged sessions from the multiplexer.
   *
   * # Parameters
   *
   * - `session_ids`: An array of session IDs to be merged. The first ID in the array is considered the primary session.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.mergeSessions([1, 2, 3]);
   * ```
   */
  mergeSessions(sessionIds: Array<number>): Promise<void>
  /**
   * Splits a session into two separate sessions.
   *
   * This method divides the input and output buffers of the specified session into two roughly equal parts,
   * creating two new sessions and removing the original session from the multiplexer.
   *
   * # Parameters
   *
   * - `session_id`: The unique identifier of the session to be split.
   *
   * # Returns
   *
   * - `Result<[u32; 2], napi::Error>`: Returns an array containing the IDs of the two new sub-sessions if successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * const [newSession1, newSession2] = multiplexer.splitSession(sessionId);
   * console.log(`Split into sessions ${newSession1} and ${newSession2}`);
   * ```
   */
  splitSession(sessionId: number): Promise<number[]>
  /**
   * Sets an environment variable for the PTY process.
   *
   * This method updates the environment variable specified by `key` with the provided `value`.
   *
   * # Parameters
   *
   * - `key`: The name of the environment variable to set.
   * - `value`: The value to assign to the environment variable.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.setEnv('PATH', '/usr/bin');
   * ```
   */
  setEnv(key: string, value: string): Promise<void>
  /**
   * Changes the shell of the PTY process.
   *
   * This method sends a command to the PTY process to replace the current shell with the specified one.
   *
   * # Parameters
   *
   * - `shell_path`: The file system path to the new shell executable.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.changeShell('/bin/zsh');
   * ```
   */
  changeShell(shellPath: string): Promise<void>
  /**
   * Retrieves the status of the PTY process.
   *
   * This method checks whether the PTY process is running or has terminated, and returns the status.
   *
   * # Returns
   *
   * - `Result<String, napi::Error>`: Returns a string indicating the status of the PTY process if successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * const status = multiplexer.status();
   * console.log(`PTY Status: ${status}`);
   * ```
   */
  status(): Promise<string>
  /**
   * Adjusts the logging level.
   *
   * This method sets the global logging level to the specified value.
   * Valid levels include "error", "warn", "info", "debug", and "trace".
   *
   * # Parameters
   *
   * - `level`: The desired logging level.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.setLogLevel('debug');
   * ```
   */
  setLogLevel(level: string): Promise<void>
  /**
   * Closes all sessions within the multiplexer.
   *
   * This method removes all active sessions, effectively resetting the multiplexer.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.closeAllSessions();
   * ```
   */
  closeAllSessions(): Promise<void>
  /**
   * Gracefully shuts down the PTY process and closes all sessions.
   *
   * This method sends a `SIGTERM` signal to the PTY process, waits for it to terminate,
   * and closes all active sessions.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.shutdownPty();
   * ```
   */
  shutdownPty(): Promise<void>
  /**
   * Forcefully shuts down the PTY process and closes all sessions.
   *
   * This method sends a `SIGKILL` signal to the PTY process, waits for it to terminate,
   * and closes all active sessions.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.forceShutdownPty();
   * ```
   */
  forceShutdownPty(): Promise<void>
  /**
   * Resizes the PTY window.
   *
   * This method adjusts the number of columns and rows of the PTY, effectively changing the terminal size.
   *
   * # Parameters
   *
   * - `cols`: The number of columns for the PTY window.
   * - `rows`: The number of rows for the PTY window.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the resize operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.resize(120, 40);
   * ```
   */
  resize(cols: number, rows: number): Promise<void>
  /**
   * Lists all active session IDs.
   *
   * This method retrieves the unique identifiers of all active sessions managed by the multiplexer.
   *
   * # Returns
   *
   * - `Result<Vec<u32>, napi::Error>`: Returns a vector of session IDs if successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * const sessionIds = multiplexer.listSessions();
   * console.log(`Active sessions: ${sessionIds.join(', ')}`);
   * ```
   */
  listSessions(): Promise<Array<number>>
  /**
   * Handles the creation of a new session.
   *
   * This method is a wrapper around the `create_session` method, providing an asynchronous
   * interface for creating a new session.
   *
   * # Returns
   *
   * - `Result<u32, napi::Error>`: Returns the unique stream ID of the newly created session if successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * const sessionId = await multiplexer.handleCreateSession();
   * console.log(`Created session with ID: ${sessionId}`);
   * ```
   */
  handleCreateSession(): Promise<number>
  /**
   * Asynchronously reads data from PTY.
   *
   * This method reads available data from the PTY process and returns it as a byte array.
   *
   * # Returns
   *
   * - `Result<Buffer, napi::Error>`: Returns a `Buffer` containing the read data if successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * const data = await multiplexer.readFromPty();
   * console.log(`Data from PTY: ${data.toString()}`);
   * ```
   */
  readFromPty(): Promise<Buffer>
}
/**
 * N-API wrapper for `PtyRenderer`.
 *
 * This struct serves as an interface between the PTY output and the Virtual DOM renderer.
 * It processes raw PTY data, converts it into virtual DOM nodes, and updates the renderer accordingly.
 */
export declare class PtyRenderer {
  /**
   * Creates a new `PtyRenderer` instance.
   *
   * Initializes the renderer with a root virtual DOM node.
   *
   * # Example
   *
   * ```javascript
   * const ptyRenderer = new PtyRenderer();
   * ```
   */
  constructor()
  /**
   * Processes PTY output data by updating the virtual DOM and rendering changes.
   *
   * This method converts raw PTY data into a styled virtual DOM node, diffs it against the previous
   * state, and applies necessary patches to the renderer.
   *
   * # Parameters
   *
   * - `data`: A `Buffer` containing raw PTY output data.
   *
   * # Example
   *
   * ```javascript
   * ptyRenderer.render(Buffer.from('Hello, PTY!'));
   * ```
   */
  render(data: Buffer): void
  /**
   * Processes and sends rendered output to a specific session.
   *
   * This method is intended to be used in conjunction with session management systems.
   * Currently, it updates the virtual DOM based on PTY output.
   *
   * # Parameters
   *
   * - `session_id`: The ID of the session to send data to (currently unused).
   * - `data`: A `Buffer` containing raw PTY output data.
   *
   * # Example
   *
   * ```javascript
   * ptyRenderer.processAndSend(1, Buffer.from('Session-specific data'));
   * ```
   */
  processAndSend(sessionId: number, data: Buffer): void
}
/**
 * The Renderer applies changes from the Virtual DOM to the terminal.
 *
 * It maintains the current state of the Virtual DOM and applies necessary updates
 * to reflect changes efficiently.
 */
export declare class Renderer {
  /** The current root of the Virtual DOM. */
  root: WrappedVNode
  /** Creates a new Renderer with the given root `VNode`. */
  constructor(root: VirtualVNode)
  /** Renders a new Virtual DOM by diffing it against the current one and applying patches. */
  render(newRoot: VirtualVNode): void
  /** Clears the terminal screen. */
  clearScreen(): void
  /**
   * Removes a child node at the specified index.
   *
   * # Parameters
   *
   * - `index`: The index of the child to remove.
   */
  removeChild(index: number): void
  /**
   * Updates the text content of a text node.
   *
   * # Parameters
   *
   * - `new_text`: The new text content.
   */
  updateText(newText: string): void
  /**
   * Updates the properties of an element.
   *
   * # Parameters
   *
   * - `props`: A reference to a `WrappedHashMap` containing the properties to update.
   */
  updateProps(props: WrappedHashMap): void
  /** Renders the entire Virtual DOM to the terminal. */
  renderAll(): void
}
export declare class State {
  get get(): NapiResult
  subscribe(callback: (arg: unknown) => void): NapiResult
  unsubscribe(listenerId: number): NapiResult
}
export declare class PtyWorker {
  /** Creates a new instance of `PtyWorker`. */
  constructor()
  /**
   * Starts the worker by setting up the necessary connections and threads.
   *
   * # Arguments
   *
   * - `worker_data`: The data required to establish connections.
   * - `callback`: A JavaScript function to receive messages from the worker.
   *
   * # Returns
   *
   * - `Result<()>`: An empty result indicating success or failure.
   */
  startWorker(workerData: WorkerData, callback: (...args: any[]) => any): void
  /**
   * Shuts down the worker by closing all connections and stopping all threads.
   *
   * # Returns
   *
   * - `Result<()>`: An empty result indicating success or failure.
   */
  shutdownWorker(): void
  /**
   * Lists all active session IDs.
   *
   * # Returns
   *
   * - `Result<Vec<u32>>`: A list of active session IDs.
   */
  listSessions(): Array<number>
  /**
   * Retrieves the data buffer for a specific session.
   *
   * # Arguments
   *
   * - `session_id`: The ID of the session.
   *
   * # Returns
   *
   * - `Result<Buffer>`: The data buffer associated with the session.
   */
  getSessionData(sessionId: number): Buffer
}
