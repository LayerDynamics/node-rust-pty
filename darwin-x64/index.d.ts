/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Struct representing session data, exposed to JavaScript. */
export interface SessionData {
  sessionId: number
  data: Array<number>
}
export declare class PtyHandle {
  /** Creates a new `PtyHandle` with logging enabled. */
  static new(): Promise<PtyHandle>
  /** Asynchronously reads data from the PTY. */
  read(): Promise<string>
  /** Asynchronously writes data to the PTY. */
  write(data: string): Promise<void>
  /** Asynchronously resizes the PTY window. */
  resize(cols: number, rows: number): Promise<void>
  /** Asynchronously executes a command in the PTY. */
  execute(command: string): Promise<string>
  /** Asynchronously closes the PTY gracefully. */
  close(): Promise<void>
  /** Returns the process ID (PID) of the PTY process. */
  pid(): number | null
  /** Sends a signal to the PTY process. */
  killProcess(signal: number): Promise<void>
  /** Waits for the PTY process to change state. */
  waitpid(options: number): Promise<number>
  /** Closes the master file descriptor of the PTY process. */
  closeMasterFd(): Promise<void>
  /** Retrieves the underlying `MultiplexerHandle` for managing sessions. */
  get multiplexerHandle(): MultiplexerHandle | null
}
/** Struct exposed to JavaScript for managing multiple PTY sessions. */
export declare class MultiplexerHandle {
  /** Creates a new `MultiplexerHandle` with a new PTY process. */
  static new(): MultiplexerHandle
  /** Creates a new session within the multiplexer. */
  createSession(): number
  /** Sends data to a specific session. */
  sendToSession(sessionId: number, data: Array<number>): void
  /** Broadcasts data to all active sessions. */
  broadcast(data: Array<number>): void
  /** Reads data from a specific session. */
  readFromSession(sessionId: number): Array<number>
  /** Reads data from all sessions. */
  readAllSessions(): Array<SessionData>
  /** Removes a specific session. */
  removeSession(sessionId: number): void
  /** Merges multiple sessions into one. */
  mergeSessions(sessionIds: Array<number>): void
  /** Splits a session into multiple sub-sessions. */
  splitSession(sessionId: number): void
  /** Sets an environment variable for the PTY process. */
  setEnv(key: string, value: string): void
  /** Changes the shell of the PTY process. */
  changeShell(shellPath: string): void
  /** Retrieves the status of the PTY process. */
  status(): string
  /** Adjusts the logging level. */
  setLogLevel(level: string): void
  /** Closes all sessions within the multiplexer. */
  closeAllSessions(): void
  /** Gracefully shuts down the PTY process and closes all sessions. */
  shutdownPty(): void
}
