/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * Represents the result of splitting a session into two separate sessions.
 *
 * This struct is exposed to JavaScript and provides the IDs of the newly created sessions.
 *
 * # Fields
 *
 * - `session1`: The ID of the first new session.
 * - `session2`: The ID of the second new session.
 */
export interface SplitSessionResult {
  session1: number
  session2: number
}
/**
 * Represents the data associated with a specific session.
 *
 * This struct is exposed to JavaScript and includes the session ID and the data payload.
 *
 * # Fields
 *
 * - `session_id`: The unique identifier for the session.
 * - `data`: The data associated with the session, represented as a `String`.
 */
export interface SessionData {
  sessionId: number
  data: string
}
/** Struct to represent session data returned to JavaScript. */
export interface SessionData {
  sessionId: number
  data: Buffer
}
/**
 * Handles multiplexer operations for PTY sessions.
 *
 * This struct manages the `PtyMultiplexer` internally and provides methods to interact with PTY sessions.
 *
 * The internal `multiplexer` field is kept private to prevent direct exposure and ensure encapsulation.
 *
 * # Example
 *
 * ```javascript
 * const { MultiplexerHandle } = require('your-module');
 *
 * async function example() {
 *   const multiplexer = MultiplexerHandle.new();
 *   const sessionId = await multiplexer.createSession();
 *   await multiplexer.sendToSession(sessionId, Buffer.from('Hello, PTY!'));
 * }
 * ```
 */
export declare class MultiplexerHandle {
  /**
   * Creates a new `MultiplexerHandle` with a fresh PTY process.
   *
   * Initializes logging, sets up the PTY process, and starts a background task to handle PTY output.
   *
   * # Errors
   *
   * Returns a `napi::Error` if the PTY process fails to initialize.
   *
   * # Example
   *
   * ```javascript
   * const { MultiplexerHandle } = require('your-module');
   *
   * async function initialize() {
   *   const multiplexer = await MultiplexerHandle.new();
   *   // Use multiplexer methods...
   * }
   * ```
   */
  static new(): MultiplexerHandle
  /**
   * Creates a new session within the multiplexer.
   *
   * Each session represents an isolated environment within the PTY process.
   *
   * # Returns
   *
   * - `Ok(u32)`: The unique identifier of the newly created session.
   * - `Err(napi::Error)`: If the session creation fails.
   *
   * # Example
   *
   * ```javascript
   * const sessionId = await multiplexer.createSession();
   * ```
   */
  createSession(): Promise<number>
  /**
   * Sends data to a specific session within the multiplexer.
   *
   * This allows targeted communication with a particular session.
   *
   * # Parameters
   *
   * - `session_id`: The ID of the session to send data to.
   * - `data`: The data to be sent, represented as a vector of bytes.
   *
   * # Errors
   *
   * Returns a `napi::Error` if sending data fails.
   *
   * # Example
   *
   * ```javascript
   * const data = Buffer.from('Hello, Session!');
   * await multiplexer.sendToSession(sessionId, data);
   * ```
   */
  sendToSession(sessionId: number, data: Array<number>): Promise<void>
  /**
   * Sends data directly to the PTY without targeting a specific session.
   *
   * Useful for sending global commands or data that affect all sessions.
   *
   * # Parameters
   *
   * - `data`: The data to be sent, represented as a slice of bytes.
   *
   * # Errors
   *
   * Returns a `napi::Error` if sending data fails.
   *
   * # Example
   *
   * ```javascript
   * const data = Buffer.from('Global Command');
   * await multiplexer.sendToPty(data);
   * ```
   */
  sendToPty(data: Uint8Array): Promise<void>
  /**
   * Broadcasts data to all active sessions within the multiplexer.
   *
   * This method sends the same data to every session, allowing for synchronized communication.
   *
   * # Parameters
   *
   * - `data`: The data to be broadcasted, represented as a slice of bytes.
   *
   * # Errors
   *
   * Returns a `napi::Error` if the broadcast fails.
   *
   * # Example
   *
   * ```javascript
   * const data = Buffer.from('Broadcast Message');
   * await multiplexer.broadcast(data);
   * ```
   */
  broadcast(data: Uint8Array): Promise<void>
  /**
   * Reads data from a specific session.
   *
   * Retrieves the latest data available from the specified session.
   *
   * # Parameters
   *
   * - `session_id`: The ID of the session to read data from.
   *
   * # Returns
   *
   * - `Ok(String)`: The data read from the session, decoded as a UTF-8 string.
   * - `Err(napi::Error)`: If reading data fails.
   *
   * # Example
   *
   * ```javascript
   * const data = await multiplexer.readFromSession(sessionId);
   * console.log(data);
   * ```
   */
  readFromSession(sessionId: number): Promise<string>
  /**
   * Reads data from all active sessions.
   *
   * Retrieves the latest data available from every session managed by the multiplexer.
   *
   * # Returns
   *
   * - `Ok(Vec<SessionData>)`: A vector containing `SessionData` for each session.
   * - `Err(napi::Error)`: If reading data fails.
   *
   * # Example
   *
   * ```javascript
   * const allData = await multiplexer.readAllSessions();
   * allData.forEach(session => {
   *   console.log(`Session ${session.session_id}: ${session.data}`);
   * });
   * ```
   */
  readAllSessions(): Promise<Array<SessionData>>
  /**
   * Removes a specific session from the multiplexer.
   *
   * This operation cleans up resources associated with the session.
   *
   * # Parameters
   *
   * - `session_id`: The ID of the session to be removed.
   *
   * # Errors
   *
   * Returns a `napi::Error` if the removal fails.
   *
   * # Example
   *
   * ```javascript
   * await multiplexer.removeSession(sessionId);
   * ```
   */
  removeSession(sessionId: number): Promise<void>
  /**
   * Merges multiple sessions into a single session.
   *
   * This operation consolidates the specified sessions, combining their data streams.
   *
   * # Parameters
   *
   * - `session_ids`: A vector of session IDs to be merged.
   *
   * # Errors
   *
   * Returns a `napi::Error` if the merge operation fails or if no session IDs are provided.
   *
   * # Example
   *
   * ```javascript
   * await multiplexer.mergeSessions([sessionId1, sessionId2]);
   * ```
   */
  mergeSessions(sessionIds: Array<number>): Promise<void>
  /**
   * Splits a session into two separate sessions.
   *
   * This operation creates two new sessions from an existing one, allowing for parallel operations.
   *
   * # Parameters
   *
   * - `session_id`: The ID of the session to be split.
   *
   * # Returns
   *
   * - `Ok(SplitSessionResult)`: Contains the IDs of the two newly created sessions.
   * - `Err(napi::Error)`: If the split operation fails.
   *
   * # Example
   *
   * ```javascript
   * const result = await multiplexer.splitSession(sessionId);
   * console.log(`New sessions: ${result.session1}, ${result.session2}`);
   * ```
   */
  splitSession(sessionId: number): Promise<SplitSessionResult>
  /**
   * Sets an environment variable for the PTY process.
   *
   * This allows customization of the PTY environment by specifying key-value pairs.
   *
   * # Parameters
   *
   * - `key`: The name of the environment variable.
   * - `value`: The value to assign to the environment variable.
   *
   * # Errors
   *
   * Returns a `napi::Error` if setting the environment variable fails.
   *
   * # Example
   *
   * ```javascript
   * await multiplexer.setEnv('PATH', '/usr/local/bin');
   * ```
   */
  setEnv(key: string, value: string): Promise<void>
  /**
   * Changes the shell executable of the PTY process.
   *
   * This allows switching between different shell environments (e.g., bash, zsh).
   *
   * # Parameters
   *
   * - `shell_path`: The filesystem path to the new shell executable.
   *
   * # Errors
   *
   * Returns a `napi::Error` if changing the shell fails.
   *
   * # Example
   *
   * ```javascript
   * await multiplexer.changeShell('/bin/zsh');
   * ```
   */
  changeShell(shellPath: string): Promise<void>
  /**
   * Retrieves the current status of the PTY process.
   *
   * This provides information about the PTY's operational state.
   *
   * # Returns
   *
   * - `Ok(String)`: A string describing the PTY status.
   * - `Err(napi::Error)`: If retrieving the status fails.
   *
   * # Example
   *
   * ```javascript
   * const status = await multiplexer.status();
   * console.log(status);
   * ```
   */
  status(): Promise<string>
  /**
   * Adjusts the logging level of the multiplexer.
   *
   * This allows dynamic control over the verbosity of logs for debugging or monitoring purposes.
   *
   * # Parameters
   *
   * - `level`: The desired logging level (e.g., "info", "debug", "error").
   *
   * # Errors
   *
   * Returns a `napi::Error` if setting the log level fails.
   *
   * # Example
   *
   * ```javascript
   * await multiplexer.setLogLevel('debug');
   * ```
   */
  setLogLevel(level: string): Promise<void>
  /**
   * Closes all active sessions within the multiplexer.
   *
   * This operation terminates every session, effectively resetting the multiplexer.
   *
   * # Errors
   *
   * Returns a `napi::Error` if closing sessions fails.
   *
   * # Example
   *
   * ```javascript
   * await multiplexer.closeAllSessions();
   * ```
   */
  closeAllSessions(): Promise<void>
  /**
   * Gracefully shuts down the PTY process and closes all sessions.
   *
   * This ensures that all resources are properly released and that the PTY process terminates cleanly.
   *
   * # Errors
   *
   * Returns a `napi::Error` if the shutdown process fails.
   *
   * # Example
   *
   * ```javascript
   * await multiplexer.shutdownPty();
   * ```
   */
  shutdownPty(): Promise<void>
}
/**
 * Represents the main PTY handle exposed to JavaScript.
 *
 * This struct manages the PTY process, the multiplexer, and command handling through channels.
 *
 * # Example
 *
 * ```javascript
 * const { PtyHandle } = require('your-module');
 *
 * async function main() {
 *   const pty = await PtyHandle.new();
 *   const multiplexer = pty.multiplexerHandle();
 *   // Interact with PTY and multiplexer...
 * }
 * ```
 */
export declare class PtyHandle {
  /**
   * Creates a new `PtyHandle` with logging enabled.
   *
   * Initializes the PTY process, sets up the multiplexer, and starts the command handler.
   *
   * # Errors
   *
   * Returns a `napi::Error` if initialization fails.
   *
   * # Example
   *
   * ```javascript
   * const pty = await PtyHandle.new();
   * ```
   */
  static new(): PtyHandle
  /**
   * Retrieves the `MultiplexerHandle` associated with this PTY.
   *
   * This allows interaction with the multiplexer for managing sessions and data.
   *
   * # Returns
   *
   * A `MultiplexerHandle` instance.
   *
   * # Example
   *
   * ```javascript
   * const multiplexer = pty.multiplexerHandle();
   * ```
   */
  get multiplexerHandle(): MultiplexerHandle
  /**
   * Asynchronously reads data from the PTY.
   *
   * Initiates a read operation and retrieves the data output from the PTY process.
   *
   * # Returns
   *
   * - `Ok(String)`: The data read from the PTY, decoded as a UTF-8 string.
   * - `Err(napi::Error)`: If the read operation fails or times out.
   *
   * # Example
   *
   * ```javascript
   * const data = await pty.read();
   * console.log(data);
   * ```
   */
  read(): Promise<string>
  /**
   * Asynchronously writes data to the PTY.
   *
   * Sends the provided data to the PTY process for execution or processing.
   *
   * # Parameters
   *
   * - `data`: The data to be written, represented as a `String`.
   *
   * # Returns
   *
   * - `Ok(())`: If the write operation is successful.
   * - `Err(napi::Error)`: If the write operation fails or times out.
   *
   * # Example
   *
   * ```javascript
   * await pty.write('ls -la');
   * ```
   */
  write(data: string): Promise<void>
  /**
   * Asynchronously resizes the PTY window.
   *
   * Adjusts the number of columns and rows of the PTY, effectively changing the terminal size.
   *
   * # Parameters
   *
   * - `cols`: The number of columns for the PTY window.
   * - `rows`: The number of rows for the PTY window.
   *
   * # Returns
   *
   * - `Ok(())`: If the resize operation is successful.
   * - `Err(napi::Error)`: If the resize operation fails or times out.
   *
   * # Example
   *
   * ```javascript
   * await pty.resize(120, 40);
   * ```
   */
  resize(cols: number, rows: number): Promise<void>
  /**
   * Asynchronously executes a command within the PTY.
   *
   * This allows running shell commands programmatically within the PTY environment.
   *
   * # Parameters
   *
   * - `command`: The shell command to be executed, represented as a `String`.
   *
   * # Returns
   *
   * - `Ok(String)`: The output or result of the executed command.
   * - `Err(napi::Error)`: If the execute operation fails or times out.
   *
   * # Example
   *
   * ```javascript
   * const output = await pty.execute('echo "Hello, World!"');
   * console.log(output);
   * ```
   */
  execute(command: string): Promise<string>
  /**
   * Asynchronously closes the PTY gracefully.
   *
   * Attempts to terminate the PTY process without abrupt interruption, ensuring resources are freed.
   *
   * # Returns
   *
   * - `Ok(())`: If the close operation is successful.
   * - `Err(napi::Error)`: If the close operation fails or times out.
   *
   * # Example
   *
   * ```javascript
   * await pty.close();
   * ```
   */
  close(): Promise<void>
  /**
   * Asynchronously forcefully kills the PTY process.
   *
   * This method is used as a last resort to terminate the PTY process if graceful shutdown fails.
   *
   * # Parameters
   *
   * - `force_timeout_ms`: The timeout in milliseconds before forcing the kill.
   *
   * # Returns
   *
   * - `Ok(())`: If the force kill operation is successful.
   * - `Err(napi::Error)`: If the force kill operation fails or times out.
   *
   * # Example
   *
   * ```javascript
   * await pty.forceKill(5000);
   * ```
   */
  forceKill(forceTimeoutMs: number): Promise<void>
  /**
   * Retrieves the process ID (PID) of the PTY process.
   *
   * This can be used for monitoring or managing the PTY process externally.
   *
   * # Returns
   *
   * - `Ok(i32)`: The PID of the PTY process.
   * - `Err(napi::Error)`: If retrieving the PID fails.
   *
   * # Example
   *
   * ```javascript
   * const pid = await pty.pid();
   * console.log(`PTY PID: ${pid}`);
   * ```
   */
  pid(): Promise<number>
  /**
   * Sends a signal to the PTY process.
   *
   * This allows external control over the PTY process, such as terminating or pausing it.
   *
   * # Parameters
   *
   * - `signal`: The signal number to send to the PTY process.
   *
   * # Errors
   *
   * Returns a `napi::Error` if sending the signal fails.
   *
   * # Example
   *
   * ```javascript
   * // Send SIGTERM to the PTY process
   * await pty.killProcess(15);
   * ```
   */
  killProcess(signal: number): Promise<void>
  /**
   * Waits for the PTY process to change state.
   *
   * This can be used to wait for the PTY process to exit or for specific signals.
   *
   * # Parameters
   *
   * - `options`: Options that modify the behavior of `waitpid`.
   *
   * # Returns
   *
   * - `Ok(i32)`: The PID returned by `waitpid`.
   * - `Err(napi::Error)`: If the `waitpid` operation fails or times out.
   *
   * # Example
   *
   * ```javascript
   * const pid = await pty.waitpid(0);
   * console.log(`Process exited with PID: ${pid}`);
   * ```
   */
  waitpid(options: number): Promise<number>
  /**
   * Closes the master file descriptor of the PTY process.
   *
   * This operation is used to release the master end of the PTY, preventing further communication.
   *
   * # Returns
   *
   * - `Ok(())`: If the operation is successful.
   * - `Err(napi::Error)`: If the operation fails or times out.
   *
   * # Example
   *
   * ```javascript
   * await pty.closeMasterFd();
   * ```
   */
  closeMasterFd(): Promise<void>
  /**
   * Sets an environment variable using the provided key and value.
   *
   * This method directly interacts with the system's environment variables.
   *
   * # Parameters
   *
   * - `key`: The name of the environment variable to set.
   * - `value`: The value to assign to the environment variable.
   *
   * # Returns
   *
   * - `Ok(())`: If the environment variable is set successfully.
   * - `Err(napi::Error)`: If setting the environment variable fails or verification fails.
   *
   * # Example
   *
   * ```javascript
   * await pty.setEnv('EDITOR', 'vim');
   * ```
   */
  setEnv(key: string, value: string): Promise<void>
}
/**
 * Multiplexer to handle multiple virtual streams on the same PTY.
 *
 * The `PtyMultiplexer` manages multiple `PtySession`s, allowing concurrent interactions
 * with a single PTY process. It provides functionalities to create, merge, split, and
 * manage sessions, as well as to handle PTY operations such as reading, writing, and
 * broadcasting data.
 */
export declare class PtyMultiplexer {
  /**
   * Creates a new `PtyMultiplexer` with the given `PtyProcess`.
   *
   * # Parameters
   *
   * - `pty_process`: The `PtyProcess` instance to be managed by the multiplexer.
   *
   * # Examples
   *
   * ```javascript
   * const { PtyMultiplexer } = require('./path_to_generated_napi_module');
   * const ptyProcess = new PtyProcess();
   * const multiplexer = new PtyMultiplexer(ptyProcess);
   * ```
   */
  constructor(ptyProcess: object)
  /**
   * Creates a new session and returns its stream ID.
   *
   * This method generates a unique stream ID for the new session, initializes its input and
   * output buffers, and registers it within the multiplexer.
   *
   * # Returns
   *
   * - `u32`: The unique stream ID of the newly created session.
   *
   * # Examples
   *
   * ```javascript
   * const sessionId = multiplexer.createSession();
   * console.log(`Created session with ID: ${sessionId}`);
   * ```
   */
  createSession(): number
  /**
   * Sends data to a specific session.
   *
   * This method appends the provided data to the input buffer of the specified session
   * and writes it to the PTY process.
   *
   * # Parameters
   *
   * - `session_id`: The unique identifier of the session to which data will be sent.
   * - `data`: The data to be sent to the session.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.sendToSession(sessionId, Buffer.from('Hello, Session!'));
   * ```
   */
  sendToSession(sessionId: number, data: Buffer): void
  /**
   * Broadcasts data to all active sessions.
   *
   * This method appends the provided data to the input buffer of all active sessions
   * and writes it to the PTY process.
   *
   * # Parameters
   *
   * - `data`: The data to be broadcasted to all sessions.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.broadcast(Buffer.from('Hello, All Sessions!'));
   * ```
   */
  broadcast(data: Buffer): void
  /**
   * Reads data from a specific session.
   *
   * This method retrieves and clears the output buffer of the specified session,
   * returning the accumulated data.
   *
   * # Parameters
   *
   * - `session_id`: The unique identifier of the session from which data will be read.
   *
   * # Returns
   *
   * - `Result<Buffer, napi::Error>`: Returns a `Buffer` containing the read data if successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * const data = multiplexer.readFromSession(sessionId);
   * console.log(`Data from session ${sessionId}:`, data.toString());
   * ```
   */
  readFromSession(sessionId: number): Buffer
  /**
   * Reads data from all sessions.
   *
   * This method retrieves and clears the output buffers of all active sessions,
   * returning a vector of `SessionData` objects.
   *
   * # Returns
   *
   * - `Result<Vec<SessionData>, napi::Error>`: Returns a vector of `SessionData` objects mapping session IDs to their read data if successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * const allData = multiplexer.readAllSessions();
   * for (const session of allData) {
   *     console.log(`Data from session ${session.session_id}:`, session.data.toString());
   * }
   * ```
   */
  readAllSessions(): Array<SessionData>
  /**
   * Removes a specific session.
   *
   * This method deletes the specified session from the multiplexer, freeing up resources.
   *
   * # Parameters
   *
   * - `session_id`: The unique identifier of the session to be removed.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.removeSession(sessionId);
   * ```
   */
  removeSession(sessionId: number): void
  /**
   * Merges multiple sessions into one.
   *
   * This method combines the input and output buffers of the specified sessions into the primary session,
   * and removes the merged sessions from the multiplexer.
   *
   * # Parameters
   *
   * - `session_ids`: An array of session IDs to be merged. The first ID in the array is considered the primary session.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.mergeSessions([1, 2, 3]);
   * ```
   */
  mergeSessions(sessionIds: Array<number>): void
  /**
   * Splits a session into multiple sub-sessions.
   *
   * This method divides the input and output buffers of the specified session into two roughly equal parts,
   * creating two new sessions and removing the original session from the multiplexer.
   *
   * # Parameters
   *
   * - `session_id`: The unique identifier of the session to be split.
   *
   * # Returns
   *
   * - `Result<[u32; 2], napi::Error>`: Returns an array containing the IDs of the two new sub-sessions if successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * const [newSession1, newSession2] = multiplexer.splitSession(sessionId);
   * console.log(`Split into sessions ${newSession1} and ${newSession2}`);
   * ```
   */
  splitSession(sessionId: number): number[]
  /**
   * Sets an environment variable for the PTY process.
   *
   * This method updates the environment variable specified by `key` with the provided `value`.
   *
   * # Parameters
   *
   * - `key`: The name of the environment variable to set.
   * - `value`: The value to assign to the environment variable.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.setEnv('PATH', '/usr/bin');
   * ```
   */
  setEnv(key: string, value: string): void
  /**
   * Changes the shell of the PTY process.
   *
   * This method sends a command to the PTY process to replace the current shell with the specified one.
   *
   * # Parameters
   *
   * - `shell_path`: The file system path to the new shell executable.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.changeShell('/bin/zsh');
   * ```
   */
  changeShell(shellPath: string): void
  /**
   * Retrieves the status of the PTY process.
   *
   * This method checks whether the PTY process is running or has terminated, and returns the status.
   *
   * # Returns
   *
   * - `Result<String, napi::Error>`: Returns a string indicating the status of the PTY process if successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * const status = multiplexer.status();
   * console.log(`PTY Status: ${status}`);
   * ```
   */
  status(): string
  /**
   * Adjusts the logging level.
   *
   * This method sets the global logging level to the specified value.
   * Valid levels include "error", "warn", "info", "debug", and "trace".
   *
   * # Parameters
   *
   * - `level`: The desired logging level.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.setLogLevel('debug');
   * ```
   */
  setLogLevel(level: string): void
  /**
   * Closes all sessions within the multiplexer.
   *
   * This method removes all active sessions, effectively resetting the multiplexer.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.closeAllSessions();
   * ```
   */
  closeAllSessions(): void
  /**
   * Gracefully shuts down the PTY process and closes all sessions.
   *
   * This method sends a `SIGTERM` signal to the PTY process, waits for it to terminate,
   * and closes all active sessions.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.shutdownPty();
   * ```
   */
  shutdownPty(): void
  /**
   * Forcefully shuts down the PTY process and closes all sessions.
   *
   * This method sends a `SIGKILL` signal to the PTY process, waits for it to terminate,
   * and closes all active sessions.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * multiplexer.forceShutdownPty();
   * ```
   */
  forceShutdownPty(): void
  /**
   * Distributes output from PTY to all sessions.
   *
   * This asynchronous method reads data from the PTY process and appends it to the output buffers
   * of all active sessions.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * await multiplexer.distributeOutput();
   * ```
   */
  distributeOutput(): Promise<void>
  /**
   * Asynchronously reads data from PTY.
   *
   * This method reads available data from the PTY process and returns it as a byte array.
   *
   * # Returns
   *
   * - `Result<Buffer, napi::Error>`: Returns a `Buffer` containing the read data if successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * const data = await multiplexer.readFromPty();
   * console.log(`Data from PTY: ${data.toString()}`);
   * ```
   */
  readFromPty(): Promise<Buffer>
  /**
   * Asynchronously dispatches output to the appropriate sessions.
   *
   * This method processes the provided output data and appends it to the output buffers
   * of all active sessions. Currently, it broadcasts the data to all sessions.
   *
   * # Parameters
   *
   * - `output`: The data to be dispatched to the sessions.
   *
   * # Returns
   *
   * - `Result<(), napi::Error>`: Returns `Ok` if the operation is successful, otherwise returns an error.
   *
   * # Examples
   *
   * ```javascript
   * await multiplexer.dispatchOutput(Buffer.from('New output data'));
   * ```
   */
  dispatchOutput(output: Buffer): Promise<void>
}
